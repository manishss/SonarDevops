# Running tests and sonarqube static analysis.
steps:
- name: 'gcr.io/cloud-builders/npm'
  entrypoint: 'sh'
  args:
    - '-c'
    - | 
      npm install
      npm run test
      npm install -g sonarqube-scanner
      sonar-scanner -Dsonar.host.url=${_HOST} -Dsonar.login=${_LOGIN} -Dsonar.password=${_PASS} -Dsonar.sources=/workspace -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info -Dsonar.tests=/workspace/ -Dsonar.test.inclusions=./**/*.js -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info -Dsonar.projectName=${_DEVOPS}-$BRANCH_NAME
        
#Getting the sonarqube Quality gate status(if failed build will stop)
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      gsutil cp gs://artifacts.${PROJECT_ID}.appspot.com/sonarqube-Qgate.sh sonarqube-Qgate.sh
      apt-get update && apt-get install jq -y
      sh sonarqube-Qgate.sh ${_API} ${_HOST} ${_SONAR_KEY}

# Building and tagging image
- name: 'gcr.io/cloud-builders/docker'
  args: ["build", "-t", "gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${COMMIT_SHA}", "."]

# Pushing the docker image to GCR
- name: 'gcr.io/cloud-builders/docker'
  args: ["push", "gcr.io/${PROJECT_ID}/${_SERVICE_NAME}"]

# Updating the latest build image in deployment
- name: 'gcr.io/cloud-builders/kubectl'
  args:
  - set
  - image
  - 'deployment/devops-1'
  - 'devops=gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${COMMIT_SHA}'
  env:
  - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
  - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
